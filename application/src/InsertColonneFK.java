/*
 * file : InsertColonneFK.java
 */
package progettopastoreluca;

import java.sql.*;
import javax.swing.JOptionPane;

/**
 * JDialog utilizzata per inserire le colonne a cui fa riferimento un vincolo,
 * di FOREIGN KEY, cioe per poolare la tabella ColonneFK
 * 
 * @author Luca Pastore N86002599
 * @version 2019
 */
public class InsertColonneFK extends javax.swing.JDialog {

    private InsertVincolo vincolo;
    private int colonneInserite;
    
    private PreparedStatement pstmt = null;
    private final String queryIns = "INSERT INTO colonne_FK(ID_colonnaRef, ID_FKcons) VALUES(?, ?)";
    private int righeInserite = 0;
    
    /**
     * Creates new form InsertColonneFK
     * @param v pannello InsertVincolo di riferimento
     * @param colIns numero di colonne da inserire
     */
    public InsertColonneFK(InsertVincolo v, int colIns) {
        vincolo = v;
        colonneInserite = colIns;
        
        this.setSize(400, 259);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        initComponents();
        
        
        v.enabledAnnullaButton(false);
        vincoloTextField.setText(v.getNomeVincolo());
        vincoloTextField.setEnabled(false);
        riempiComboBox();
    }

    //Metodo che mostra a video l'errore generatosi durante l'inserimento di un elemento nel database
    private void mostraErrore(SQLException e) {
        String msg;
        
        msg = "Codice Errore: " + e.getErrorCode() + "\n";
        msg += "Messaggio: " + e.getMessage() + "\n";
        msg += "SQLState: " + e.getSQLState() + "\n";

        JOptionPane.showMessageDialog(this, msg, "Errore", JOptionPane.ERROR_MESSAGE);
    }
    
    private int ricavaIDcolonna(){
        Statement stmt;
        ResultSet rs;
        int id = -1;
        String query = "SELECT id_colonna FROM colonna WHERE nomeColonna = '" + (String)nomeColComboBox.getSelectedItem() + "' AND tabella = " + vincolo.getIDtabRef();
    
        if(nomeColComboBox.getSelectedIndex() != -1){
            try{
                stmt = Database.getDefaultConnection().createStatement();
                rs = stmt.executeQuery(query);
            
                while(rs.next()){
                    id = rs.getInt(1);
                }
                
                stmt.close();
            }catch(SQLException e){
                mostraErrore(e);
            }
        }
        return id;
    }
    
    private void riempiComboBox(){
        Statement stmt;
        ResultSet rs;
        String query = "SELECT nomeColonna FROM colonna WHERE tabella = " + vincolo.getIDtabRef();
        
        nomeColComboBox.removeAllItems();
        try{
            stmt = Database.getDefaultConnection().createStatement();
            rs = stmt.executeQuery(query);
            
            while(rs.next()){
                nomeColComboBox.addItem(rs.getString(1));
            }
            
            nomeColComboBox.setSelectedIndex(-1);
            
            stmt.close();
        }catch(SQLException e){
            mostraErrore(e);
        }
    }
    
    private int ricavaIdVincoloFK(){
        Statement stmt;
        ResultSet rs;
        String query = "SELECT ID_fk FROM chiaveEsterna WHERE ID_fk = (SELECT MAX(ID_fk) FROM chiaveEsterna)";
        int id = -1;
        
        try{
            stmt = Database.getDefaultConnection().createStatement();
            rs = stmt.executeQuery(query);
            
            while(rs.next()){
                id = rs.getInt(1);
            }
            
            stmt.close();
        }catch(SQLException e){
            mostraErrore(e);
        }
        
        return id;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        istrLabel1 = new javax.swing.JLabel();
        istrLabel3 = new javax.swing.JLabel();
        istr2 = new javax.swing.JLabel();
        vincoloTextField = new javax.swing.JTextField();
        nomeVincLabel = new javax.swing.JLabel();
        nomeColLabel = new javax.swing.JLabel();
        nomeColComboBox = new javax.swing.JComboBox<>();
        insertButton = new javax.swing.JButton();
        campoObb = new javax.swing.JLabel();
        istr3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Seleziona Colonne FK");

        istrLabel1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istrLabel1.setText("Selezionare le colonne messe in corrispondenza");

        istrLabel3.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istrLabel3.setText("mediante il vincolo di Foreign Key.");

        istr2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        istr2.setText("Ricorda: inserire esattamente lo stesso numero di colonne");

        vincoloTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        nomeVincLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        nomeVincLabel.setText("Nome Vincolo  *");

        nomeColLabel.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        nomeColLabel.setText("Nome Colonna  *");

        nomeColComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        insertButton.setFont(new java.awt.Font("Impact", 0, 24)); // NOI18N
        insertButton.setText("Inserisci");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        campoObb.setText("*  Campo Obbligatorio");

        istr3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        istr3.setText("di quelle inserite nella tabella principale.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(istrLabel1)
                            .addComponent(istrLabel3)
                            .addComponent(istr2)
                            .addComponent(campoObb)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nomeColLabel)
                                    .addComponent(nomeVincLabel))
                                .addGap(70, 70, 70)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nomeColComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(vincoloTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(istr3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(insertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(istrLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(istrLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(istr2)
                .addGap(1, 1, 1)
                .addComponent(istr3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(nomeVincLabel))
                    .addComponent(vincoloTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomeColLabel)
                    .addComponent(nomeColComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(insertButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(campoObb)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
       try{
            if(nomeColComboBox.getSelectedIndex() == -1){
                JOptionPane.showMessageDialog(this, "Prima di effettuare l'inserimento, rimepire tutti i campi obbligatori", "Attenzione", JOptionPane.WARNING_MESSAGE); 
            }else{
                pstmt = Database.getDefaultConnection().prepareStatement(queryIns);
            
                pstmt.setInt(1, ricavaIDcolonna());
                pstmt.setInt(2, ricavaIdVincoloFK());
            
                righeInserite = pstmt.executeUpdate();
                if(righeInserite != 0){
                    colonneInserite--;
                    nomeColComboBox.removeItem(nomeColComboBox.getSelectedItem());
                    nomeColComboBox.setSelectedIndex(-1);
                    if(colonneInserite == 0){
                        JOptionPane.showMessageDialog(this, "Inserimento vincolo FK Concluso Correttamente !", "Inserimento FK concluso", JOptionPane.INFORMATION_MESSAGE); 
                        vincolo.pulisciInput();
                        vincolo.enabledAnnullaButton(true);
                        dispose();
                    }else{
                        JOptionPane.showMessageDialog(this, "Inserimento Riuscito Correttamente !\n Inserire altre " + colonneInserite + "colonne.", "Inserimento  effettuato", JOptionPane.INFORMATION_MESSAGE); 
                    }
                }
                
                if(pstmt != null) pstmt.close();
            }
        }catch(SQLException e){
            mostraErrore(e);
        }
    }//GEN-LAST:event_insertButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel campoObb;
    private javax.swing.JButton insertButton;
    private javax.swing.JLabel istr2;
    private javax.swing.JLabel istr3;
    private javax.swing.JLabel istrLabel1;
    private javax.swing.JLabel istrLabel3;
    private javax.swing.JComboBox<String> nomeColComboBox;
    private javax.swing.JLabel nomeColLabel;
    private javax.swing.JLabel nomeVincLabel;
    private javax.swing.JTextField vincoloTextField;
    // End of variables declaration//GEN-END:variables
}
