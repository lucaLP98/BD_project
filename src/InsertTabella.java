/**
 * file: InsertTabella.java
 */
package progettopastoreluca;

import java.sql.*;
import javax.swing.JOptionPane;

/**
 * Pannello che permette l'aggiunta dell'elemento tabella nel database
 * 
 * @author Luca Pastore N86002599
 * @version 2019
 */
public class InsertTabella extends javax.swing.JPanel {
    
    private InsertColonna c;
    
    private String nomeTab;
    private String schemaTab;
    private int idTab;
    
    private PreparedStatement pstmt = null;
    private final String queryIns = "INSERT INTO tabella(nomeTabella, Proprietario, Schema) VALUES(?, ?, ?)";
    private int righeInserite = 0;
    
    /**
     * Creates new form InsertTabella
     */
    public InsertTabella() {
        this.setSize(770, 423);
        initComponents();
    }
    
    //azzera tutti i campi di imput dell pannello
    public void pulisciInput(){
        nomeTabTextField.setText("");
        proprTabComboBox.setSelectedIndex(-1);
        schemaTabComboBox.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        istruzioni1 = new javax.swing.JLabel();
        istruzioni2 = new javax.swing.JLabel();
        istruzioni3 = new javax.swing.JLabel();
        nomeTabLabel = new javax.swing.JLabel();
        nomeTabTextField = new javax.swing.JTextField();
        schemaTabLabel = new javax.swing.JLabel();
        schemaTabComboBox = new javax.swing.JComboBox<>();
        proprTabLabel = new javax.swing.JLabel();
        proprTabComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        insertTabButton = new javax.swing.JButton();
        annullaButton = new javax.swing.JButton();
        istruzioni4 = new javax.swing.JLabel();

        istruzioni1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istruzioni1.setText("Di seguito verranno inserite le informazioni della tabella che si vuole aggiungere nel Database; ");

        istruzioni2.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istruzioni2.setText("Dato che una tabella non può non avere colonne, dopo aver inserito la tabella");

        istruzioni3.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istruzioni3.setText("si verrà reindirizzati all'inserimento delle colonne , dove dovra essere inserita almeno una colonna.");

        nomeTabLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        nomeTabLabel.setText("Nome Tabella *");

        nomeTabTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        schemaTabLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        schemaTabLabel.setText("Schema *");

        schemaTabComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        proprTabLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        proprTabLabel.setText("Proprietario *");

        proprTabComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel1.setText("* Campo Obbligatorio");

        insertTabButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        insertTabButton.setText("Inserisci Tabella e vai ad inserimento colonne");
        insertTabButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertTabButtonActionPerformed(evt);
            }
        });

        annullaButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        annullaButton.setText("Annulla");
        annullaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annullaButtonActionPerformed(evt);
            }
        });

        istruzioni4.setFont(new java.awt.Font("Impact", 0, 17)); // NOI18N
        istruzioni4.setText("Nel campo Proprietario vengono mostrati solo gli utenti che hanno i diritti necessari per creare una tabella");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nomeTabLabel)
                            .addComponent(schemaTabLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(proprTabLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(113, 113, 113)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nomeTabTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(schemaTabComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(proprTabComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(342, 342, 342))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(istruzioni1)
                    .addComponent(istruzioni3)
                    .addComponent(istruzioni2)
                    .addComponent(istruzioni4))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(insertTabButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(annullaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(istruzioni1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(istruzioni2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(istruzioni3)
                .addGap(5, 5, 5)
                .addComponent(istruzioni4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeTabTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeTabLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(schemaTabComboBox)
                    .addComponent(schemaTabLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proprTabLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(proprTabComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(annullaButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(insertTabButton, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    //restituisce il nome della tabella che si vuole inserire
    public String getNomeTab(){
        return nomeTab;
    } 
    
    //restituisce lo schema della tabella che si vuole inserire
    public String getSchemaTab(){
        return schemaTab;
    } 
    
    //metodo che controlla se i campi di input sono stati riempiti o ne rimane almeno uno vuoto
    private boolean campiVuoti(){
        boolean tmp;
        
        tmp = nomeTabTextField.getText().equals("") || proprTabComboBox.getSelectedIndex() == -1 || schemaTabComboBox.getSelectedIndex() == -1;
        
        return tmp;
    }
    
    //metodo utilizzato per riempire la proprTabComboBox con gli username degli utenti che posseggono i permessi necessari alla creazione di una tabella
    private void riempiProprTabComboBox(){
        Statement stmt;
        ResultSet rst;
        String query = "SELECT U.username FROM utente U JOIN compRuoloSistema C ON U.ruolo = C.ID_ruolo WHERE C.ID_privSis = 'ALL PRIVILEGIES' OR C.ID_privSis = 'CREATE TABLE'";
        
        try{
            stmt = Database.getDefaultConnection().createStatement();
            rst = stmt.executeQuery(query);
            
            while(rst.next()){
                proprTabComboBox.addItem(rst.getString(1));
            }
            
            proprTabComboBox.setSelectedIndex(-1);
            
            stmt.close();
        }catch(SQLException e){
            mostraErrore(e);
        }
    }
    
    //metodo che ricava l'ID della tabella appena inserita nel database
    private void setIDtabella(){
        Statement stmt;
        ResultSet rst;
        String query = "SELECT id_tabella FROM tabella WHERE nomeTabella = '" + nomeTabTextField.getText() + "' AND schema = '" + (String)schemaTabComboBox.getSelectedItem() + "'";
        
        if(!campiVuoti()){
            try{
                stmt = Database.getDefaultConnection().createStatement();
                rst = stmt.executeQuery(query);
                
                while(rst.next()){
                    idTab = rst.getInt(1);
                }
                
                stmt.close();
            }catch(SQLException e){
                mostraErrore(e);
            }   
        }
    }
    
    public int getIdTab(){
        return idTab;
    }
    
    //metodo utilizzato per riempire la schemaTabComboBox con gli schemi presenti nel database
    private void riempiSchemaTabComboBox(){
        Statement stmt;
        ResultSet rst;
        String query = "SELECT nomeSchema FROM schema1";
        
        try{
            stmt = Database.getDefaultConnection().createStatement();
            rst = stmt.executeQuery(query);
            
            while(rst.next()){
                schemaTabComboBox.addItem(rst.getString(1));
            }
            
            schemaTabComboBox.setSelectedIndex(-1);
            
            stmt.close();
        }catch(SQLException e){
            mostraErrore(e);
        }
    }
    
    //metodo richiamato nella JPanel Insert utilizzato per riempire le JComboBox presenti in questo JPanel
    //in modo che contengano sempre dati aggiurnati  ai cambiamenti che avvengono nel DB
    public void riempiComboBox(){
        proprTabComboBox.removeAllItems();
        schemaTabComboBox.removeAllItems();
        this.riempiProprTabComboBox();
        this.riempiSchemaTabComboBox();
    }
    
    //Metodo che mostra a video l'errore generatosi durante l'inserimento di un elemento schema nel database
    private void mostraErrore(SQLException e) {
        String msg;
        
        msg = "Codice Errore: " + e.getErrorCode() + "\n";
        msg += "Messaggio: " + e.getMessage() + "\n";
        msg += "SQLState: " + e.getSQLState() + "\n";

        JOptionPane.showMessageDialog(this, msg, "Errore", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * inserisce la tabella all'interno del Database;
     * Dato che SQL non permette la creazione di tabelle prive di colonne, dopo aver inserito la tabella
     * viene reindirizzato l'utente all'inserimento colonne
     * 
     */
    private void insertTabButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertTabButtonActionPerformed
        try{ 
            if(campiVuoti()){
                JOptionPane.showMessageDialog(this, "Prima di effettuare l'inserimento della tabella\nriempire tutti i campi obbligatori !", "Attenzione", JOptionPane.WARNING_MESSAGE);
            }else{
                pstmt = Database.getDefaultConnection().prepareStatement(queryIns);            
            
                pstmt.setString(1, nomeTabTextField.getText());
                pstmt.setString(2, (String)proprTabComboBox.getSelectedItem());
                pstmt.setString(3, (String)schemaTabComboBox.getSelectedItem());
                righeInserite = pstmt.executeUpdate();
            
                if(righeInserite != 0){
                    
                    nomeTab = nomeTabTextField.getText();
                    schemaTab = (String)schemaTabComboBox.getSelectedItem();
                    setIDtabella();
                    
                    JOptionPane.showMessageDialog(this, "La tabella " + nomeTabTextField.getText() + " è stata inserita correttamente, ora si verra reindirizzati\nall'inserimento colonne: inserire almeno una colonna", "Inserimento Tabella effettuato", JOptionPane.INFORMATION_MESSAGE); 
                    //Qui viene richiamato un nuovo pannello InsertColonna per l'inserimento delle colonne nella taabella appena inesrita        
                    
                    insColToTab();
                } 
                
                if(pstmt != null) pstmt.close();
            }
            
        }catch(SQLException e) {
            mostraErrore(e);
        }
    }//GEN-LAST:event_insertTabButtonActionPerformed

    //inserisce un un nuovo pannello InsertColonna nell'attuale pannello
    private void insColToTab(){
        c = new InsertColonna(this);
        
        this.removeAll();
        this.add(c);    
        this.revalidate();
        this.repaint(); 
    }
    
    //funzione utilizzata per ricreare il pannello menu dopo averlo sostituito con pannello InsertColonna
    public void ricreaPanel(){
        this.removeAll();
        this.initComponents();
        this.revalidate();
        this.repaint(); 
    }
    
    //annulla l'inserimento tabella
    private void annullaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annullaButtonActionPerformed
        pulisciInput();
    }//GEN-LAST:event_annullaButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton annullaButton;
    private javax.swing.JButton insertTabButton;
    private javax.swing.JLabel istruzioni1;
    private javax.swing.JLabel istruzioni2;
    private javax.swing.JLabel istruzioni3;
    private javax.swing.JLabel istruzioni4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel nomeTabLabel;
    private javax.swing.JTextField nomeTabTextField;
    private javax.swing.JComboBox<String> proprTabComboBox;
    private javax.swing.JLabel proprTabLabel;
    private javax.swing.JComboBox<String> schemaTabComboBox;
    private javax.swing.JLabel schemaTabLabel;
    // End of variables declaration//GEN-END:variables
}
