/*
 * file : AddValueToDom.java
 */
package progettopastoreluca;

import java.sql.*;
import javax.swing.JOptionPane;

/**
 * Pannello che permette di aggiungere un Valore ad un Dominio gia esistente
 * 
 * @author Luca Pastore N86002599
 * @verison 2019
 */ 
public class AddValueToDom extends javax.swing.JPanel {
    private PreparedStatement pstmt = null;
    private int righeInserite = 0;
    private String queryIns = "INSERT INTO valore(valoreNome, id_dominio) VALUES(?, ?)";
    
    /**
     * Creates new form AddValueToDom
     */
    public AddValueToDom() {
        this.setSize(770, 418);
        initComponents();
    }
    
    //metodo che svuota le caselle di testo e reimposta  le ComboBox
    public void pulisciInput(){
        valoreTextField.setText("");
        dominioComboBox.setSelectedIndex(-1);
    }
    
    //Metodo che mostra a video l'errore generatosi durante l'inserimento di un elemento nel database
    private void mostraErrore(SQLException e) {
        String msg;
        
        msg = "Codice Errore: " + e.getErrorCode() + "\n";
        msg += "Messaggio: " + e.getMessage() + "\n";
        msg += "SQLState: " + e.getSQLState() + "\n";

        JOptionPane.showMessageDialog(this, msg, "Errore", JOptionPane.ERROR_MESSAGE);
    }
    
    //riempe la dominioComboBox con i Domini presenti nel database
    public void riempiDominioComboBox(){
        Statement stmt;
        ResultSet rst;
        String query = "SELECT D.schema, D.nomeDominio FROM dominio D";
        
        dominioComboBox.removeAllItems();
        try{
            stmt = Database.getDefaultConnection().createStatement();
            rst = stmt.executeQuery(query);
            
            while(rst.next()){
                //i Domini nella comboBox saranno mostrate secondo il modello: nomeSchema.nomeDominio
                //in quanto Domini appartenenti a Schemi diversi possono avere lo stesso nome
                dominioComboBox.addItem(rst.getString(1)+"."+rst.getString(2));
            }
            dominioComboBox.setSelectedIndex(-1);
            
            stmt.close();
        }catch(SQLException e){
            mostraErrore(e);
        }
    }
    
    //ricava il nome del Dominio selezionato nella dominioComboBox
    private String ricavaNomeDom(String itemSelected){
        int i = 0;
        String schema;
        
        while(itemSelected.charAt(i) != '.'){
            i++;
        }
        
        schema = itemSelected.substring(i+1);
        
        return schema;
    }
    
    //ricava il nome dello schema a cui appartiene il Dominio scelto
    private String ricavaSchemaDom(String itemSelected){
        int i = 0;
        String schema;
        
        while(itemSelected.charAt(i) != '.'){
            i++;
        }
        
        schema = itemSelected.substring(0, i);
        
        return schema;
    }
    
    //ricava la chiave primaria id_dominio del Dominio scelto nella dominioComboBox
    private int ricavaIDdom(String itemSelected){
        String dom = ricavaNomeDom(itemSelected);
        String schema = ricavaSchemaDom(itemSelected);
        int id = -1;
        
        Statement stmt; 
        ResultSet rst;
        String query = "SELECT D.ID_dominio FROM dominio D WHERE D.nomeDominio = '" + dom + "' AND D.schema = '" + schema + "'";
    
        try{
            stmt = Database.getDefaultConnection().createStatement();
            rst = stmt.executeQuery(query);
            
            while(rst.next()){
                id = rst.getInt(1);
            }
            
            stmt.close();
        }catch(SQLException e){
            mostraErrore(e);
        }
        
        return id;
    }

    //controlla che siano stati riempiti tutti i campi di input obbligatori
    private boolean campiVuoti(){
        return valoreTextField.getText().equals("") || dominioComboBox.getSelectedIndex() == -1;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        istr1 = new javax.swing.JLabel();
        valoreLabel = new javax.swing.JLabel();
        valoreTextField = new javax.swing.JTextField();
        domnioLabel = new javax.swing.JLabel();
        dominioComboBox = new javax.swing.JComboBox<>();
        istr3 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        annullaButton = new javax.swing.JButton();

        istr1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istr1.setText("Questo pannello permette l'aggiunta di un Valore ad un Dominio esistente.");

        valoreLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        valoreLabel.setText("Valore* :");

        valoreTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        domnioLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        domnioLabel.setText("Dominio*  :");

        dominioComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        istr3.setText("*  Campo Obbligatorio");

        addButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        addButton.setText("Aggiungi Valore");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        annullaButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        annullaButton.setText("Annulla");
        annullaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annullaButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(istr1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(valoreLabel)
                                    .addComponent(domnioLabel))
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(valoreTextField)
                                    .addComponent(dominioComboBox, 0, 199, Short.MAX_VALUE)))
                            .addComponent(istr3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(238, 238, 238)
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(annullaButton)))
                .addContainerGap(232, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(istr1)
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valoreLabel)
                    .addComponent(valoreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(domnioLabel)
                    .addComponent(dominioComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addButton)
                    .addComponent(annullaButton))
                .addGap(69, 69, 69)
                .addComponent(istr3)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    //effettua inserimento del Valore al Dominio Scelto
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try{ 
            if(campiVuoti()){
                JOptionPane.showMessageDialog(this, "Prima di effettuare l'aggiunta del Valore\nriempire tutti i campi obbligatori !", "Attenzione", JOptionPane.WARNING_MESSAGE);
            }else{
                pstmt = Database.getDefaultConnection().prepareStatement(queryIns);            
            
                pstmt.setString(1, valoreTextField.getText());
                pstmt.setInt(2, ricavaIDdom(dominioComboBox.getSelectedItem().toString()));
                righeInserite = pstmt.executeUpdate();
            
                if(righeInserite != 0){
                    JOptionPane.showMessageDialog(this, "Il Valore " + valoreTextField.getText() + " Ã¨ stato aggiunto al dominio " + dominioComboBox.getSelectedItem().toString() +" correttamente", "Inserimento Valore effettuato", JOptionPane.INFORMATION_MESSAGE); 
                    pulisciInput();
                }
                
                if(pstmt != null) pstmt.close();
            }
        }catch(SQLException e) {
            mostraErrore(e);
        }    
    }//GEN-LAST:event_addButtonActionPerformed

    private void annullaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annullaButtonActionPerformed
        pulisciInput();
    }//GEN-LAST:event_annullaButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton annullaButton;
    private javax.swing.JComboBox<String> dominioComboBox;
    private javax.swing.JLabel domnioLabel;
    private javax.swing.JLabel istr1;
    private javax.swing.JLabel istr3;
    private javax.swing.JLabel valoreLabel;
    private javax.swing.JTextField valoreTextField;
    // End of variables declaration//GEN-END:variables
}
