/**
 * file : InsertAssertion.java
 */
package progettopastoreluca;

import java.sql.*;
import javax.swing.JOptionPane;

/**
 * Pannello che permette l'aggiunta dell'elemento asserzione nel database;
 * 
 * @author Luca Pastore N86002599
 * @version 2019
 */
public class InsertAssertion extends javax.swing.JPanel {

    private PreparedStatement pstmt = null;
    private final String queryIns = "INSERT INTO asserzione(NomeAsserzione, ClausolaNotExists, Proprietario, Schema) VALUES(?, ?, ?, ?)";
    private int righeInserite = 0;
    
    /**
     * Creates new form InsertAssertion
     */
    public InsertAssertion() {
        this.setSize(770,423);
        initComponents();
    }
    
    //azzera i campi input del pannello
    public void pulisciInput(){
        nomeAssertTextField.setText("");
        proprAssertComboBox.setSelectedIndex(-1);
        schemaAssertComboBox.setSelectedIndex(-1);
        notExistsTextArea.setText("");
    }
    
    //metodo che controlla se i campi di input sono stati riempiti o ne rimane almeno uno vuoto
    private boolean campiVuoti(){
        boolean tmp;
        
        tmp = nomeAssertTextField.getText().equals("") || proprAssertComboBox.getSelectedIndex() == -1 || schemaAssertComboBox.getSelectedIndex() == -1 || notExistsTextArea.getText().equals("");
        
        return tmp;
    }
    
    //metodo utilizzato per riempire la proprAssertComboBox con gli username degli utenti che posseggono i permessi necessari alla creazione di un' asserzione
    private void riempiProprAssertComboBox(){
        Statement stmt;
        ResultSet rst;
        String query = "SELECT U.username FROM utente U JOIN compRuoloSistema C ON U.ruolo = C.ID_ruolo WHERE C.ID_privSis = 'ALL PRIVILEGIES' OR C.ID_privSis = 'CREATE ASSERTION'";
        
        try{
            stmt = Database.getDefaultConnection().createStatement();
            rst = stmt.executeQuery(query);
            
            while(rst.next()){
                proprAssertComboBox.addItem(rst.getString(1));
            }
            
            proprAssertComboBox.setSelectedIndex(-1);
            
            stmt.close();
        }catch(SQLException e){
            mostraErrore(e);
        }
    }
    
    //metodo utilizzato per riempire la schemaAssertComboBox con gli schemi presenti nel database
    private void riempiSchemaAssertComboBox(){
        Statement stmt;
        ResultSet rst;
        String query = "SELECT nomeSchema FROM schema1";
        
        try{
            stmt = Database.getDefaultConnection().createStatement();
            rst = stmt.executeQuery(query);
            
            while(rst.next()){
                schemaAssertComboBox.addItem(rst.getString(1));
            }
            
            schemaAssertComboBox.setSelectedIndex(-1);
            
            stmt.close();
        }catch(SQLException e){
            mostraErrore(e);
        }
    }
    
    //metodo richiamato nella JPanel Insert utilizzato per riempire le JComboBox presenti in questo JPanel
    //in modo che contengano sempre dati aggiurnati  ai cambiamenti che avvengono nel DB
    public void riempiComboBox(){
        proprAssertComboBox.removeAllItems();
        schemaAssertComboBox.removeAllItems();
        this.riempiProprAssertComboBox();
        this.riempiSchemaAssertComboBox();
    }
    
    //Metodo che mostra a video l'errore generatosi durante l'inserimento di un elemento schema nel database
    private void mostraErrore(SQLException e) {
        String msg;
        
        msg = "Codice Errore: " + e.getErrorCode() + "\n";
        msg += "Messaggio: " + e.getMessage() + "\n";
        msg += "SQLState: " + e.getSQLState() + "\n";

        JOptionPane.showMessageDialog(this, msg, "Errore", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        istruzioni1 = new javax.swing.JLabel();
        istruzioni2 = new javax.swing.JLabel();
        istruzioni4 = new javax.swing.JLabel();
        nomeAssertLabel = new javax.swing.JLabel();
        nomeAssertTextField = new javax.swing.JTextField();
        queryVistaLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notExistsTextArea = new javax.swing.JTextArea();
        schemaAssertLabel = new javax.swing.JLabel();
        schemaAssertComboBox = new javax.swing.JComboBox<>();
        proprAssertComboBox = new javax.swing.JComboBox<>();
        proprAssertLabel = new javax.swing.JLabel();
        campoObbLabel = new javax.swing.JLabel();
        insertAssertButton = new javax.swing.JButton();
        annullaButton = new javax.swing.JButton();
        istruzioni3 = new javax.swing.JLabel();

        istruzioni1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istruzioni1.setText("Inserire di seguito i dati relativi all' asserzione che si vuole inserire. ");

        istruzioni2.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istruzioni2.setText("Nel campo Clausola NOT EXISTS va inserito la condizione che non deve verificarsi affinche il vincolo");

        istruzioni4.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istruzioni4.setText("necessari alla creazione di una Asserzione.");

        nomeAssertLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        nomeAssertLabel.setText("Nome Asserzione  *");

        nomeAssertTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        queryVistaLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        queryVistaLabel.setText("Clausola NOT EXISTS  *");

        notExistsTextArea.setColumns(20);
        notExistsTextArea.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        notExistsTextArea.setRows(5);
        jScrollPane1.setViewportView(notExistsTextArea);

        schemaAssertLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        schemaAssertLabel.setText("Schema  *");

        schemaAssertComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        proprAssertComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        proprAssertLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        proprAssertLabel.setText("Proprietario  *");

        campoObbLabel.setText("*  Campo obbligatorio");

        insertAssertButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        insertAssertButton.setText("Inserisci Asserzione");
        insertAssertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertAssertButtonActionPerformed(evt);
            }
        });

        annullaButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        annullaButton.setText("Annulla");
        annullaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annullaButtonActionPerformed(evt);
            }
        });

        istruzioni3.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istruzioni3.setText("sia valido.  Nel campo Proprietario verranno visualizzati solo   gli utenti che hanno i permessi ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(schemaAssertLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(queryVistaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(nomeAssertLabel))
                            .addComponent(proprAssertLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(campoObbLabel)
                        .addGap(119, 119, 119)
                        .addComponent(insertAssertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(annullaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(istruzioni1)
                    .addComponent(istruzioni2)
                    .addComponent(istruzioni4)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(proprAssertComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nomeAssertTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(schemaAssertComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(istruzioni3)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(istruzioni1)
                .addGap(5, 5, 5)
                .addComponent(istruzioni2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(istruzioni3)
                .addGap(4, 4, 4)
                .addComponent(istruzioni4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeAssertLabel)
                    .addComponent(nomeAssertTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(queryVistaLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schemaAssertComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(schemaAssertLabel))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proprAssertLabel)
                    .addComponent(proprAssertComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertAssertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(annullaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campoObbLabel))
                .addContainerGap(16, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    //inserisce un nuovo elemento asserzione nel database
    private void insertAssertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertAssertButtonActionPerformed
        try{ 
            if(campiVuoti()){
                JOptionPane.showMessageDialog(this, "Prima di effettuare l'inserimento dell' asserzione\nriempire tutti i campi obbligatori !", "Attenzione", JOptionPane.WARNING_MESSAGE);
            }else{
                pstmt = Database.getDefaultConnection().prepareStatement(queryIns);            
            
                pstmt.setString(1, nomeAssertTextField.getText());
                pstmt.setString(2, notExistsTextArea.getText());
                pstmt.setString(3, (String)proprAssertComboBox.getSelectedItem());
                pstmt.setString(4, (String)schemaAssertComboBox.getSelectedItem());
                righeInserite = pstmt.executeUpdate();
            
                if(righeInserite != 0){
                    JOptionPane.showMessageDialog(this, "L' asserzione " + nomeAssertTextField.getText() + " è stata inserita correttamente !", "Inserimento Asserzione effettuato", JOptionPane.INFORMATION_MESSAGE); 
                    pulisciInput();
                } 
                
                if(pstmt != null) pstmt.close();
            }
        }catch(SQLException e) {
            mostraErrore(e);
        }
    }//GEN-LAST:event_insertAssertButtonActionPerformed

    //annulla l'inserimento di un elemento asserzione nel database
    private void annullaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annullaButtonActionPerformed
        pulisciInput();
    }//GEN-LAST:event_annullaButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton annullaButton;
    private javax.swing.JLabel campoObbLabel;
    private javax.swing.JButton insertAssertButton;
    private javax.swing.JLabel istruzioni1;
    private javax.swing.JLabel istruzioni2;
    private javax.swing.JLabel istruzioni3;
    private javax.swing.JLabel istruzioni4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nomeAssertLabel;
    private javax.swing.JTextField nomeAssertTextField;
    private javax.swing.JTextArea notExistsTextArea;
    private javax.swing.JComboBox<String> proprAssertComboBox;
    private javax.swing.JLabel proprAssertLabel;
    private javax.swing.JLabel queryVistaLabel;
    private javax.swing.JComboBox<String> schemaAssertComboBox;
    private javax.swing.JLabel schemaAssertLabel;
    // End of variables declaration//GEN-END:variables
}
