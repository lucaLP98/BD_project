/*
 * file : Delete.java
 */
package progettopastoreluca;

import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Pannello che permette di eliminare una riga di una tabella dalla base di dati
 * 
 * @author Luca Pastore N86002599
 * @version 2019
 */
public class Delete extends javax.swing.JPanel {
    private ResultSet rs;
    private PreparedStatement stmt;
    private String queryDel = "DELETE FROM "; //intestazione query per l'eliminazione di un elemento
    private String nomeTab = ""; //nome tabella a cui appartiene l'elemento da eliminare
    
    private TableModel model; //modello della tabella che permette di visualizzare le righe che si possono cancellare
    
    /**
     * Creates new form Delete
     */
    public Delete() {
        initComponents();
        deleteTable.setModel(new DefaultTableModel());
    }

    //Metodo che mostra a video l'errore generatosi durante la visualizzazione di una tabella
    public void mostraErrore(SQLException e) {
        String msg;
        
        msg = "Codice Errore: " + e.getErrorCode() + "\n";
        msg += "Messaggio: " + e.getMessage() + "\n";
        msg += "SQLState: " + e.getSQLState() + "\n";

        JOptionPane.showMessageDialog(this, msg, "Errore", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deletePanel = new javax.swing.JPanel();
        deleteLabel = new javax.swing.JLabel();
        elemComboBox = new javax.swing.JComboBox<>();
        deleteButton = new javax.swing.JButton();
        istruzioni1 = new javax.swing.JLabel();
        istruzioni2 = new javax.swing.JLabel();
        deleteAllButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        deleteTable = new javax.swing.JTable();

        deleteLabel.setFont(new java.awt.Font("Impact", 0, 20)); // NOI18N
        deleteLabel.setText("Selezionare l'elemento che si vuole eliminare : ");

        elemComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        elemComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Privilegio Sistema", "Privilegio Oggetto", "Ruolo", "Schema", "Tabella", "Colonna", "Vincolo", "Trigger", "Procedura", "Parametro procedura", "Variabile proc/trig", "Exception proc/trig", "Dominio", "Valore dominio", "Vista", "Asserzione", "Sequenza", "Privilegio Sistema da Ruolo", "Privilegio Oggetto da Ruolo" }));
        elemComboBox.setSelectedIndex(-1);
        elemComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elemComboBoxActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteButton.setText("Elimina");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        istruzioni1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        istruzioni1.setText("Si puo eliminare una sola riga per volta; l'eliminazione di determinati elementi porta all'eliminazione a catena di altri elementi.");

        istruzioni2.setText("Attenzione: un elemento cancellato non potr√† in alcun modo essere recuperato.");

        deleteAllButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        deleteAllButton.setText("Elimina Tutto");
        deleteAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout deletePanelLayout = new javax.swing.GroupLayout(deletePanel);
        deletePanel.setLayout(deletePanelLayout);
        deletePanelLayout.setHorizontalGroup(
            deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deletePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deletePanelLayout.createSequentialGroup()
                        .addGroup(deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(istruzioni1)
                            .addComponent(istruzioni2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteAllButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(deletePanelLayout.createSequentialGroup()
                        .addComponent(deleteLabel)
                        .addGap(18, 18, 18)
                        .addComponent(elemComboBox, 0, 198, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        deletePanelLayout.setVerticalGroup(
            deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deletePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(elemComboBox)
                        .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(deletePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deletePanelLayout.createSequentialGroup()
                        .addComponent(istruzioni1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(istruzioni2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(deletePanelLayout.createSequentialGroup()
                        .addComponent(deleteAllButton)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        deleteTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(deleteTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(deletePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deletePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    //mostra le righe della tabella selezionata dalla elemComboBox nella JTable deleteTable
    private void elemComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elemComboBoxActionPerformed
        String querySelect = "SELECT * FROM ";
        
        //ricavo il nome della tabella in base alla scelta fatta dalla elemComboBox
        if(elemComboBox.getSelectedItem() != null){
            switch(elemComboBox.getSelectedItem().toString()){
                case "Privilegio Sistema" :
                    querySelect = "SELECT * FROM privSistema";
                    nomeTab = "privSistema";
                break;
                
                case "Privilegio Oggetto" :
                    querySelect = "SELECT * FROM privOggetto";
                    nomeTab = "privOggetto";
                break;
                
                case "Ruolo" :
                    querySelect = "SELECT * FROM ruolo";
                    nomeTab = "ruolo";
                break;
                
                case "Schema" :
                    querySelect = "SELECT * FROM schema1";
                    nomeTab = "schema1";
                break;
                
                case "Tabella" :
                    querySelect = "SELECT * FROM tabella";
                    nomeTab = "tabella";
                break;
                
                case "Colonna" :
                    querySelect = "SELECT C.ID_colonna, C.nomeColonna, C.tipo, C.lunghezzaDati, C.nullo, C.valDefault, (SELECT T.nomeTabella FROM tabella T WHERE T.id_tabella = C.tabella) AS tabella, (SELECT D.nomeDominio FROM dominio D WHERE D.id_dominio = C.id_dominio) AS dominio FROM colonna C";
                    nomeTab = "colonna";
                break;
                
                case "Vincolo" :
                    querySelect = "SELECT V.id_vincolo, V.nomeVincolo, V.tipo, V.condCheck, V.stato, (SELECT T.nomeTabella FROM tabella T WHERE T.id_tabella = V.tabella) AS tabella, V.proprietario FROM vincolo V";
                    nomeTab = "vincolo";
                break;
                
                case "Trigger" :
                    querySelect = "SELECT TR.id_trigger, TR.nomeTrigger, TR.tempo, TR.forEachRow, TR.condWhen, TR.causa, TR.bloccoCodice, TR.proprietario, TR.schema, NVL2(TR.oggettoTab, (SELECT T.nomeTabella FROM tabella T WHERE T.id_tabella = TR.oggettoTab), (SELECT V.nomeVista FROM vista V WHERE V.id_view = TR.oggettoView)) AS oggetto FROM trigger1 TR";
                    nomeTab = "trigger1";
                break;
                
                case "Procedura" :
                    querySelect = "SELECT * FROM procedura";
                    nomeTab = "procedura";
                break;
                
                case "Parametro procedura" :
                    querySelect = "SELECT id_parametro, nomeParam, tipo, tipologiaPar, (SELECT A.nomeProcedura FROM procedura A WHERE A.id_procedura = P.id_proc) AS procedura FROM parametri P";
                    nomeTab = "parametri";
                break;
                
                case "Variabile proc/trig" :
                    querySelect = "SELECT V.id_var, V.nomeVariabile, V.tipo, NVL2(V.ID_trigger, (SELECT T.nomeTrigger FROM trigger1 T WHERE T.id_trigger = V.ID_trigger), (SELECT P.nomeProcedura FROM procedura P WHERE P.id_procedura = V.id_proc)) AS appartenente_a FROM variabili V";
                    nomeTab = "variabili";
                break;
                
                case "Exception proc/trig" :
                    querySelect = "SELECT E.id_eccezione, E.nomeEccezione, E.bloccoCodice, NVL2(E.ID_trigger, (SELECT T.nomeTrigger FROM trigger1 T WHERE T.id_trigger = E.ID_trigger), (SELECT P.nomeProcedura FROM procedura P WHERE P.id_procedura = E.id_proc)) AS appartenente_a FROM eccezioni E";
                    nomeTab = "eccezioni";
                break;
                
                case "Dominio" :
                    querySelect = "SELECT * FROM dominio";
                    nomeTab = "dominio";
                break;
                
                case "Valore dominio" :
                    querySelect = "SELECT V.valoreNome, V.id_dominio, (SELECT D.nomeDominio FROM dominio D WHERE D.id_dominio = V.id_dominio) AS dominio FROM valore V";
                    nomeTab = "valore";
                break;
                
                case "Vista" :
                    querySelect = "SELECT * FROM vista";
                    nomeTab = "vista";
                break;
                
                case "Asserzione" :
                    querySelect = "SELECT * FROM asserzione";
                    nomeTab = "asserzione";
                break;
                
                case "Sequenza" :
                    querySelect = "SELECT * FROM sequenza";
                    nomeTab = "sequenza";
                break;
                
                case "Privilegio Oggetto da Ruolo" :
                    querySelect = "SELECT * FROM compRuoloOggetto";
                    nomeTab = "compRuoloOggetto";
                break;
                
                case "Privilegio Sistema da Ruolo" :
                    querySelect = "SELECT * FROM compRuoloSistema";
                    nomeTab = "compRuoloSistema";
                break;
            }
            
            //eseguo la query SELECT che recupera le righe della tabella scelta e le posizione lenna deleteTable
            try{
                if(nomeTab.equals("compRuoloSistema") || nomeTab.equals("compRuoloOggetto"))
                    stmt = Database.getDefaultConnection().prepareStatement(querySelect + " ORDER BY ID_RUOLO");
                else
                    stmt = Database.getDefaultConnection().prepareStatement(querySelect);
                
                rs = stmt.executeQuery();
                
                model = new TableModel(rs);
                model.setEditable(false);
                model.setNumColumn();
                
                while(rs.next()) {
                    int riga = model.getRowCount(); 
                    model.setRowCount(model.getRowCount() + 1); //nuova riga
                    for(int c = 0; c < model.getColumnCount(); c++) {
                        Object valore = rs.getObject(c+1);
                        model.setValueAt(valore, riga, c);
                    }
                }
                
                deleteTable.setModel(model);
                
                if(stmt != null) stmt.close();
            }catch(SQLException e){
                mostraErrore(e);
            }
        }
    }//GEN-LAST:event_elemComboBoxActionPerformed

    //elimino la riga selezionata dalla deleteTable dalla tabella scelta nella elemComboBox
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        if(deleteTable.getSelectedRow() != -1){
            int IDchiave;
            String chiave;
            
            final int NUMERICA = 1;
            final int STRINGA = 2;
            final int ALTRO = 3;
            int tipoChiave = 0;
            
            int deletedRow;
            
            //preparo lo statement in base alla tabella scelta
            try{
                switch (nomeTab) {
                    case "privOggetto":
                        tipoChiave = STRINGA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab +" WHERE nomePrivOgg = ?");
                    break;
                    case "privSistema":
                        tipoChiave = STRINGA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE nomePrivSist = ?");
                    break;
                    case "ruolo":
                        tipoChiave = STRINGA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE nomeRuolo = ?");
                    break;
                    case "schema1":
                        tipoChiave = STRINGA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE nomeSchema = ?");
                    break;
                    case "valore":
                        tipoChiave = ALTRO;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE valoreNome = ? AND ID_dominio = ?");
                    break;
                    case "asserzione":
                        tipoChiave = NUMERICA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_asserzione = ?");
                    break;
                    case "colonna":
                        tipoChiave = NUMERICA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_colonna = ?");
                    break;
                    case "dominio":
                        tipoChiave = NUMERICA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_dominio = ?");
                    break;
                    case "eccezioni":
                        tipoChiave = NUMERICA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_eccezione = ?");
                    break;
                    case "parametri":
                        tipoChiave = NUMERICA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_parametro = ?");
                    break;
                    case "procedura":
                        tipoChiave = NUMERICA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_procedura = ?");
                    break;
                    case "sequenza":
                        tipoChiave = NUMERICA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_sequenza = ?");
                    break;
                    case "tabella":
                        tipoChiave = NUMERICA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_tabella = ?");
                    break;
                    case "trigger1":
                        tipoChiave = NUMERICA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_trigger = ?");
                    break;
                    case "variabili":
                        tipoChiave = NUMERICA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_var = ?");
                    break;
                    case "vincolo":
                        tipoChiave = NUMERICA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_vincolo = ?");
                    break;
                    case "vista":
                        tipoChiave = NUMERICA;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_view = ?");
                    break;
                    case "compRuoloOggetto" :
                        tipoChiave = ALTRO;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_ruolo = ? AND ID_privOgg = ?");
                    break;
                    case "compRuoloSistema" :
                        tipoChiave = ALTRO;
                        stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab + " WHERE ID_ruolo = ? AND ID_privSis = ?");
                    break;
                }
                
                //ricavo la chiave primaria della riga selezionata
                if(tipoChiave == NUMERICA){
                    IDchiave = Integer.parseInt(deleteTable.getValueAt(deleteTable.getSelectedRow(),0).toString()); 
                    stmt.setInt(1, IDchiave);
                }else if(tipoChiave == STRINGA){
                    chiave = deleteTable.getValueAt(deleteTable.getSelectedRow(),0).toString();
                    stmt.setString(1, chiave);
                }else{
                    stmt.setString(1, deleteTable.getValueAt(deleteTable.getSelectedRow(),0).toString());
                    stmt.setString(2, deleteTable.getValueAt(deleteTable.getSelectedRow(),1).toString());
                }
                
                //elimino la riga selezionata 
                deletedRow = stmt.executeUpdate(); 
                
                if(deletedRow != 0){
                    model.removeRow(deleteTable.getSelectedRow());
                    JOptionPane.showMessageDialog(this, "La riga √® stata eliminata", "Riga eliminata", JOptionPane.INFORMATION_MESSAGE);
                } 
                
                if(stmt != null) stmt.close();
            }catch(SQLException e){
                mostraErrore(e);
            }  
        }else{
            JOptionPane.showMessageDialog(this, "Selezionare la riga da cancellare", "Errore", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void deleteAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllButtonActionPerformed
        int canc;
        
        if(elemComboBox.getSelectedIndex() != -1){
            try{
                stmt = Database.getDefaultConnection().prepareStatement(queryDel + nomeTab);
                
                //elimino le righe della tabella selezionata
                canc = stmt.executeUpdate(); 
                
                if(canc != 0){
                    model.removeAllRows();
                    JOptionPane.showMessageDialog(this, "Tutte le righe di "+ nomeTab +" sono state eliminate", "Righe eliminate", JOptionPane.INFORMATION_MESSAGE);
                }
                
                if(stmt != null) stmt.close();
            }catch(SQLException e){
                mostraErrore(e);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Selezionare prima gli elementi da cancellare dal men√π a tendina", "Errore", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteAllButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteAllButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel deleteLabel;
    private javax.swing.JPanel deletePanel;
    private javax.swing.JTable deleteTable;
    private javax.swing.JComboBox<String> elemComboBox;
    private javax.swing.JLabel istruzioni1;
    private javax.swing.JLabel istruzioni2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
