/*
 * file : InsertException.java
 */
package progettopastoreluca;

import java.sql.*;
import javax.swing.JOptionPane;

/**
 * Finestra di dialogo utilizzata per l'inserimento delle eccezioni in procedure/funzioni o trigger
 * 
 * @author Luca Pastore N86002599
 * @version 2019
 */
public class InsertException extends javax.swing.JDialog {

    private final int EXC_PROCEDURA = 1;
    private final int EXC_TRIGGER = 2;
    private int tipoExc;
    
    private InsertProcedura proc;
    private InsertTrigger trig;
    private int id_parent;
    
    private PreparedStatement pstmt = null;
    private final String queryIns1 = "INSERT INTO eccezioni(nomeEccezione, bloccoCodice, ID_proc) VALUES(?, ?, ?)";
    private final String queryIns2 = "INSERT INTO eccezioni(nomeEccezione, bloccoCodice, ID_trigger) VALUES(?, ?, ?)";
    private int righeInserite = 0;
    
    /**
     * Creates new form InsertException
     * @param parent procedura a cui aggiungere l'exception
     */
    public InsertException(InsertProcedura parent) {
        this.setSize(418, 334);
        this.setVisible(true);
        initComponents();
        
        parent.enabledAnnullaButton(false);
        triggerLabel.setVisible(false);
        triggerTextField.setVisible(false);
        procTextField.setText(parent.getNomeProc());
        procTextField.setEditable(false);
        
        proc = parent;
        id_parent = parent.getIDprocedura();
        
        tipoExc = EXC_PROCEDURA;
    }
    
    public InsertException(InsertTrigger parent) {
        this.setSize(418, 334);
        this.setVisible(true);
        initComponents();
        
        procLabel.setVisible(false);
        procTextField.setVisible(false);
        triggerTextField.setText(parent.getNomeTrigger());
        triggerTextField.setEditable(false);
        
        parent.enabledAnnullaButton(false);
        trig = parent;
        id_parent = parent.getIDtrigger();
        
        tipoExc = EXC_TRIGGER;
    }

    //controlla se i campi di input sono stati riempiti tutti
    private boolean campiVuoti(){
        return nomeExcTextField.getText().equals("") || bloccoCodTextArea.getText().equals("");
    }
    
    //azzera campi di input
    public void pulisciInput(){
        nomeExcTextField.setText("");
        bloccoCodTextArea.setText("");
    }
    
    //Metodo che mostra a video l'errore generatosi durante l'inserimento di un elemento nel database
    private void mostraErrore(SQLException e) {
        String msg;
        
        msg = "Codice Errore: " + e.getErrorCode() + "\n";
        msg += "Messaggio: " + e.getMessage() + "\n";
        msg += "SQLState: " + e.getSQLState() + "\n";

        JOptionPane.showMessageDialog(this, msg, "Errore", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        istr1 = new javax.swing.JLabel();
        istr2 = new javax.swing.JLabel();
        triggerLabel = new javax.swing.JLabel();
        procLabel = new javax.swing.JLabel();
        procTextField = new javax.swing.JTextField();
        triggerTextField = new javax.swing.JTextField();
        nomeExcLabel = new javax.swing.JLabel();
        nomeExcTextField = new javax.swing.JTextField();
        bloccoCodLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bloccoCodTextArea = new javax.swing.JTextArea();
        campoObb = new javax.swing.JLabel();
        insertButton = new javax.swing.JButton();
        endButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Inserimento Eccezioni");

        istr1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istr1.setText("Di sequito verranno inseriti i dati relativi alle exception ");

        istr2.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istr2.setText("da inserire. Premere \"Fine\" per terminare l'inserimento.");

        triggerLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        triggerLabel.setText("Trigger  ");

        procLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        procLabel.setText("Procedura");

        procTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        triggerTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        nomeExcLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        nomeExcLabel.setText("Nome Exception  *");

        nomeExcTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        bloccoCodLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bloccoCodLabel.setText("Blocco Codice  *");

        bloccoCodTextArea.setColumns(20);
        bloccoCodTextArea.setRows(5);
        jScrollPane1.setViewportView(bloccoCodTextArea);

        campoObb.setText("*  Campo Obbligatorio");

        insertButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        insertButton.setText("Inserisci");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        endButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        endButton.setText("Fine");
        endButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(istr1)
                            .addComponent(istr2)
                            .addComponent(procLabel))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(triggerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nomeExcLabel)
                            .addComponent(campoObb)
                            .addComponent(bloccoCodLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(procTextField)
                            .addComponent(triggerTextField)
                            .addComponent(nomeExcTextField))
                        .addGap(33, 33, 33))))
            .addGroup(layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(insertButton)
                .addGap(18, 18, 18)
                .addComponent(endButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(istr1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(istr2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(triggerLabel)
                    .addComponent(triggerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(procLabel)
                    .addComponent(procTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nomeExcLabel)
                    .addComponent(nomeExcTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bloccoCodLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(campoObb))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(insertButton)
                    .addComponent(endButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        try{
            if(campiVuoti()){
                 JOptionPane.showMessageDialog(this, "Prima di effettuare l'inserimento di un' eccezione\nriempire tutti i campi obbligatori !", "Attenzione", JOptionPane.WARNING_MESSAGE);
            }else{
                if(tipoExc == EXC_TRIGGER)
                    pstmt = Database.getDefaultConnection().prepareStatement(queryIns2);
                else
                    pstmt = Database.getDefaultConnection().prepareStatement(queryIns1);
                
                pstmt.setString(1, nomeExcTextField.getText());
                pstmt.setString(2, bloccoCodTextArea.getText());
                pstmt.setInt(3, id_parent);
                
                righeInserite = pstmt.executeUpdate();
                if(righeInserite != 0){
                    JOptionPane.showMessageDialog(this, "L' exception " + nomeExcTextField.getText() + " è stata aggiunta", "Inserimento effettuato", JOptionPane.INFORMATION_MESSAGE);
                    pulisciInput();
                }
                
                if(pstmt != null) pstmt.close();
            }
        }catch(SQLException e) {
            mostraErrore(e);
        }
    }//GEN-LAST:event_insertButtonActionPerformed

    private void endButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endButtonActionPerformed
        if(tipoExc == EXC_TRIGGER){
            JOptionPane.showMessageDialog(this, "L' inserimento del Trigger " + trig.getNomeTrigger() + "è stato completato", "Inserimento Trigger completato", JOptionPane.INFORMATION_MESSAGE);
            trig.pulisciInput(); 
            trig.enabledAnnullaButton(false);
        }
        else{
            JOptionPane.showMessageDialog(this, "L' inserimento della procedura/funzione " + proc.getNomeProc() + " è stato completato", "Inserimento Procedura completato", JOptionPane.INFORMATION_MESSAGE);
            proc.pulisciInput(); 
            proc.enabledAnnullaButton(true);
        }
            
        dispose();
    }//GEN-LAST:event_endButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bloccoCodLabel;
    private javax.swing.JTextArea bloccoCodTextArea;
    private javax.swing.JLabel campoObb;
    private javax.swing.JButton endButton;
    private javax.swing.JButton insertButton;
    private javax.swing.JLabel istr1;
    private javax.swing.JLabel istr2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nomeExcLabel;
    private javax.swing.JTextField nomeExcTextField;
    private javax.swing.JLabel procLabel;
    private javax.swing.JTextField procTextField;
    private javax.swing.JLabel triggerLabel;
    private javax.swing.JTextField triggerTextField;
    // End of variables declaration//GEN-END:variables
}
