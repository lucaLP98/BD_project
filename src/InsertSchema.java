/**
 * file: InsertSchema.java
 */
package progettopastoreluca;

import java.sql.*;
import javax.swing.JOptionPane;

/**
 * Pannello che permette l'aggiunta dell'elemento schema nel database
 * 
 * @author Luca Pastore N86002599
 * @version 2019
 */
public class InsertSchema extends javax.swing.JPanel {
    
    private PreparedStatement pstmt = null;
    private final String queryIns = "INSERT INTO schema1(nomeSchema, Proprietario) VALUES(?,?)";
    private int righeInserite = 0;
    
    /**
     * Creates new form InsertSchema
     */
    public InsertSchema() {
        this.setSize(770, 423);
        initComponents();
    }
    
    //svuota tutti i campi di input del pannello
    public void pulisciInput(){
        nomeSchemaTextField.setText("");
        proprSchemaComboBox.setSelectedIndex(-1);
    }

    //Metodo che mostra a video l'errore generatosi durante l'inserimento di un elemento schema nel database
    private void mostraErrore(SQLException e) {
        String msg;
        
        msg = "Codice Errore: " + e.getErrorCode() + "\n";
        msg += "Messaggio: " + e.getMessage() + "\n";
        msg += "SQLState: " + e.getSQLState() + "\n";

        JOptionPane.showMessageDialog(this, msg, "Errore", JOptionPane.ERROR_MESSAGE);
    }
    
    //metodo che restituisce true se almeno uno dei campi di input Ã¨ vuoto, false se sono entrambi non vuoti
    private boolean campiVuoti(){
        boolean tmp;
        
        tmp = nomeSchemaTextField.getText().equals("") || proprSchemaComboBox.getSelectedIndex()==-1;
        
        return tmp;
    }
    
    //metodo che inserisce nella proprSchemaComboBox solo gli utenti che hanno i permessi necessari alla creazione di uno schema 
    public void riempiComboBox(){
        Statement stmt;
        ResultSet utenti;
        String query = "SELECT U.userName FROM utente U JOIN compRuoloSistema C ON U.ruolo = C.ID_ruolo WHERE C.ID_privSis = 'ALL PRIVILEGIES' OR C.ID_privSis = 'CREATE SCHEMA'";            
        
        proprSchemaComboBox.removeAllItems();
        try{
            stmt = Database.getDefaultConnection().createStatement();
            utenti = stmt.executeQuery(query);
            
            while(utenti.next()){
                proprSchemaComboBox.addItem(utenti.getString(1));
            }           
            
            stmt.close();
        }catch(SQLException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Errore", JOptionPane.ERROR_MESSAGE);
        }finally{
            proprSchemaComboBox.setSelectedIndex(-1);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        istruzioni1 = new javax.swing.JLabel();
        istruzioni2 = new javax.swing.JLabel();
        istruzioni3 = new javax.swing.JLabel();
        nomeSchemaLabel = new javax.swing.JLabel();
        nomeSchemaTextField = new javax.swing.JTextField();
        proprSchemaLabel = new javax.swing.JLabel();
        proprSchemaComboBox = new javax.swing.JComboBox<>();
        campoObblSchemaLabel = new javax.swing.JLabel();
        insertSchemaButton = new javax.swing.JButton();
        annullaButton = new javax.swing.JButton();

        istruzioni1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istruzioni1.setText("Inserire di seguito i dati dello schema che si desidera aggiungere al Database.");

        istruzioni2.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istruzioni2.setText("Nel campo Proprietario verranno mostrati solo gli utenti che hanno i permessi necessari ");

        istruzioni3.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        istruzioni3.setText("per la creazione di uno schema.");

        nomeSchemaLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        nomeSchemaLabel.setText("Nome Schema  *");

        nomeSchemaTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        proprSchemaLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        proprSchemaLabel.setText("Proprietario  *");

        proprSchemaComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        campoObblSchemaLabel.setText("*  Campo Obbligatorio");

        insertSchemaButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        insertSchemaButton.setText("Inserisci Schema");
        insertSchemaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertSchemaButtonActionPerformed(evt);
            }
        });

        annullaButton.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        annullaButton.setText("Annulla");
        annullaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annullaButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(istruzioni1)
                            .addComponent(istruzioni2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nomeSchemaLabel)
                                    .addComponent(proprSchemaLabel))
                                .addGap(100, 100, 100)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nomeSchemaTextField)
                                    .addComponent(proprSchemaComboBox, 0, 200, Short.MAX_VALUE)))
                            .addComponent(campoObblSchemaLabel)
                            .addComponent(istruzioni3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(insertSchemaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(annullaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(istruzioni1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(istruzioni2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(istruzioni3)
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nomeSchemaLabel)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(nomeSchemaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proprSchemaLabel)
                    .addComponent(proprSchemaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(insertSchemaButton)
                    .addComponent(annullaButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(campoObblSchemaLabel)
                .addGap(41, 41, 41))
        );
    }// </editor-fold>//GEN-END:initComponents

    //metodo utilizzato per annullare l'inserimento dello schema
    private void annullaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annullaButtonActionPerformed
        pulisciInput();
    }//GEN-LAST:event_annullaButtonActionPerformed

    //metodo che inserisce un elemento schema all'interno del database
    private void insertSchemaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertSchemaButtonActionPerformed
        try{ 
            if(campiVuoti()){
                JOptionPane.showMessageDialog(this, "Prima di effettuare l'inserimento dello schema\nriempire tutti i campi obbligatori !", "Attenzione", JOptionPane.WARNING_MESSAGE);
            }else{
                pstmt = Database.getDefaultConnection().prepareStatement(queryIns);            
            
                pstmt.setString(1, nomeSchemaTextField.getText());
                pstmt.setString(2, (String)proprSchemaComboBox.getSelectedItem());
                righeInserite = pstmt.executeUpdate();
            
                if(righeInserite != 0){
                    JOptionPane.showMessageDialog(this, "Lo Schema " + nomeSchemaTextField.getText() + " Ã¨ stato inserito correttamente", "Inserimento Schema effettuato", JOptionPane.INFORMATION_MESSAGE); 
                    pulisciInput();
                }
                
                if(pstmt != null) pstmt.close();
            }
            
        }catch(SQLException e) {
            mostraErrore(e);
        }    
    }//GEN-LAST:event_insertSchemaButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton annullaButton;
    private javax.swing.JLabel campoObblSchemaLabel;
    private javax.swing.JButton insertSchemaButton;
    private javax.swing.JLabel istruzioni1;
    private javax.swing.JLabel istruzioni2;
    private javax.swing.JLabel istruzioni3;
    private javax.swing.JLabel nomeSchemaLabel;
    private javax.swing.JTextField nomeSchemaTextField;
    private javax.swing.JComboBox<String> proprSchemaComboBox;
    private javax.swing.JLabel proprSchemaLabel;
    // End of variables declaration//GEN-END:variables
}
